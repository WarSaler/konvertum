import Foundation
import os.log

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
class HistoricalDataManager {
    static let shared = HistoricalDataManager()
    private let logger = Logger(subsystem: "com.Procent.Procent", category: "HistoricalDataManager")
    
    // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (15 –∏—é–ª—è 2025)
    private let preloadedDataEndDate = Calendar.current.date(from: DateComponents(year: 2025, month: 7, day: 15))!
    
    // –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    private var preloadedData: [String: [String: Double]] = [:]
    private var isPreloadedDataLoaded = false
    private let currencyService = FawazCurrencyService.shared
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        formatter.timeZone = TimeZone(secondsFromGMT: 0)
        return formatter
    }()
    
    private init() {
        loadPreloadedData()
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
    private func loadPreloadedData() {
        guard let path = Bundle.main.path(forResource: "preloaded_historical_data", ofType: "json"),
              let data = NSData(contentsOfFile: path) else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª preloaded_historical_data.json")
            return
        }
        
        do {
            if let json = try JSONSerialization.jsonObject(with: data as Data, options: []) as? [String: [String: Double]] {
                preloadedData = json
                print("‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: \(preloadedData.keys.count) –¥–∞—Ç, \(preloadedData.values.first?.keys.count ?? 0) –≤–∞–ª—é—Ç")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: \(error)")
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    /// - Parameters:
    ///   - fromCurrency: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
    ///   - toCurrency: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
    ///   - startDate: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
    ///   - endDate: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
    ///   - completion: Callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    func getHistoricalData(
        fromCurrency: String,
        toCurrency: String,
        startDate: Date,
        endDate: Date,
        completion: @escaping (Result<[(Date, Double)], Error>) -> Void
    ) {
        let calendar = Calendar.current
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        
        var result: [(Date, Double)] = []
        var missingDates: [Date] = []
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        var currentDate = startDate
        while currentDate <= endDate {
            let dateString = dateFormatter.string(from: currentDate)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∫—ç—à–µ
            if currentDate <= preloadedDataEndDate,
               let dayData = preloadedData[dateString],
               let rate = calculateRate(from: fromCurrency, to: toCurrency, dayData: dayData) {
                result.append((currentDate, rate))
                logger.debug("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(dateString): \(fromCurrency)/\(toCurrency) = \(rate)")
            } else {
                // –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API
                missingDates.append(currentDate)
            }
            
            currentDate = calendar.date(byAdding: .day, value: 1, to: currentDate) ?? currentDate
        }
        
        print("üìä –ù–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: \(result.count) –¥–∞—Ç")
        print("üîÑ –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API: \(missingDates.count) –¥–∞—Ç")
        
        // –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if missingDates.isEmpty {
            logger.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∫—ç—à–µ –¥–ª—è \(fromCurrency)/\(toCurrency)")
            completion(.success(result.sorted { $0.0 < $1.0 }))
            return
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º \(missingDates.count) –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞—Ç —á–µ—Ä–µ–∑ API –¥–ª—è \(fromCurrency)/\(toCurrency)")
        print("üìä –ü–µ—Ä–∏–æ–¥: \(dateFormatter.string(from: startDate)) - \(dateFormatter.string(from: endDate))")
        print("üìä –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ: \(result.count) —Ç–æ—á–µ–∫, –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ API: \(missingDates.count) —Ç–æ—á–µ–∫")
        
        loadMissingDataFromAPI(
            fromCurrency: fromCurrency,
            toCurrency: toCurrency,
            missingDates: missingDates
        ) { [weak self] apiResult in
            switch apiResult {
            case .success(let apiData):
                result.append(contentsOf: apiData)
                completion(.success(result.sorted { $0.0 < $1.0 }))
            case .failure(let error):
                self?.logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API: \(error.localizedDescription)")
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if !result.isEmpty {
                    completion(.success(result.sorted { $0.0 < $1.0 }))
                } else {
                    completion(.failure(error))
                }
            }
        }
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –∫—É—Ä—Å –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞–ª—é—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å
    private func calculateRate(from: String, to: String, dayData: [String: Double]) -> Double? {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –≤–∞–ª—é—Ç–∞
        if from == to {
            return 1.0
        }
        
        // –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ USD
        if from == "USD" {
            return dayData[to]
        }
        
        // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ USD
        if to == "USD" {
            if let fromRate = dayData[from] {
                return 1.0 / fromRate
            }
        }
        
        // –ö—Ä–æ—Å—Å-–∫—É—Ä—Å —á–µ—Ä–µ–∑ USD
        if let fromRate = dayData[from], let toRate = dayData[to] {
            return toRate / fromRate
        }
        
        return nil
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
    private func loadMissingDataFromAPI(
        fromCurrency: String,
        toCurrency: String,
        missingDates: [Date],
        completion: @escaping (Result<[(Date, Double)], Error>) -> Void
    ) {
        guard !missingDates.isEmpty else {
            completion(.success([]))
            return
        }
        
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º \(missingDates.count) –¥–∞—Ç —á–µ—Ä–µ–∑ API –¥–ª—è –ø–∞—Ä—ã \(fromCurrency)/\(toCurrency)")
        
        Task {
            var allResults: [(Date, Double)] = []
            var hasError = false
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Currency –¥–ª—è API
            let fromCurrencyObj = Currency(code: fromCurrency, name: fromCurrency, flagName: fromCurrency.lowercased(), rate: 1.0)
            let toCurrencyObj = Currency(code: toCurrency, name: toCurrency, flagName: toCurrency.lowercased(), rate: 1.0)
            
            for date in missingDates {
                do {
                    if let result = try await self.currencyService.fetchRateForDateAsync(from: fromCurrencyObj, to: toCurrencyObj, date: date) {
                        allResults.append(result)
                        let dateString = self.dateFormatter.string(from: date)
                        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—É—Ä—Å –¥–ª—è \(dateString): \(result.1)")
                    } else {
                        let dateString = self.dateFormatter.string(from: date)
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å –¥–ª—è \(dateString)")
                        hasError = true
                    }
                } catch {
                    let dateString = self.dateFormatter.string(from: date)
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞ –¥–ª—è \(dateString): \(error.localizedDescription)")
                    hasError = true
                }
            }
            
            DispatchQueue.main.async {
                print("üéâ API –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: \(allResults.count) –∫—É—Ä—Å–æ–≤")
                if hasError && allResults.isEmpty {
                    completion(.failure(NSError(domain: "HistoricalDataManager", code: 1, userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API"])))
                } else {
                    completion(.success(allResults))
                }
            }
        }
    }
    
    /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    private func groupConsecutiveDates(_ dates: [Date]) -> [(start: Date, end: Date)] {
        guard !dates.isEmpty else { return [] }
        
        let sortedDates = dates.sorted()
        var ranges: [(start: Date, end: Date)] = []
        var currentStart = sortedDates[0]
        var currentEnd = sortedDates[0]
        
        for i in 1..<sortedDates.count {
            let date = sortedDates[i]
            let daysBetween = Calendar.current.dateComponents([.day], from: currentEnd, to: date).day!
            
            if daysBetween == 1 {
                // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞
                currentEnd = date
            } else {
                // –†–∞–∑—Ä—ã–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                ranges.append((start: currentStart, end: currentEnd))
                currentStart = date
                currentEnd = date
            }
        }
        
        ranges.append((start: currentStart, end: currentEnd))
        return ranges
    }
}

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
extension HistoricalDataManager {
    /// –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º FawazCurrencyService
    func fetchHistoricalDataCompatible(
        fromCurrency: String,
        toCurrency: String,
        days: Int,
        endDate: Date = Date(),
        completion: @escaping (Result<[(Date, Double)], Error>) -> Void
    ) {
        let calendar = Calendar.current
        let startDate = calendar.date(byAdding: .day, value: -days + 1, to: endDate) ?? endDate
        
        getHistoricalData(
            fromCurrency: fromCurrency,
            toCurrency: toCurrency,
            startDate: startDate,
            endDate: endDate,
            completion: completion
        )
    }
}