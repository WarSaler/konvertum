import Foundation
import Combine

// –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å fawazahmed0 currency API
class FawazCurrencyService {
    static let shared = FawazCurrencyService()
    private let session = URLSession.shared
    private let cache = NSCache<NSString, NSData>()
    
    // –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    private var historicalCache: [String: [HistoricalDataPoint]] = [:]
    private var currentRatesCache: [String: Double] = [:]
    private let cacheQueue = DispatchQueue(label: "fawaz.cache", qos: .utility)
    
    // –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    private let requestQueue = DispatchQueue(label: "fawaz.requests", qos: .utility)
    private let requestSemaphore = DispatchSemaphore(value: 3) // –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
    private var lastRequestTime: Date?
    private let minRequestInterval: TimeInterval = 0.5 // 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    private let historyDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        formatter.locale = Locale(identifier: "en_US_POSIX")
        return formatter
    }()
    
    private init() {}
    
    // MARK: - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ API
    
    private struct FawazCurrentResponse: Decodable {
        let date: String?
        let rates: [String: Double]
        
        init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è date
            if container.contains(.date) {
                date = try container.decode(String.self, forKey: .date)
            } else {
                date = nil
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏ –∏—â–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
            let allKeys = container.allKeys
            var tempRates: [String: Double] = [:]
            
            for key in allKeys {
                if key.stringValue != "date" {
                    if let nestedRates = try? container.decode([String: Double].self, forKey: key) {
                        // –§–æ—Ä–º–∞—Ç: {"usd": {"eur": 0.85, "rub": 75.0}}
                        tempRates = nestedRates
                        break
                    } else if let value = try? container.decode(Double.self, forKey: key) {
                        // –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç: {"eur": 0.85, "rub": 75.0}
                        tempRates[key.stringValue] = value
                    }
                }
            }
            
            rates = tempRates
        }
        
        struct CodingKeys: CodingKey {
            var stringValue: String
            init?(stringValue: String) { self.stringValue = stringValue }
            var intValue: Int? { nil }
            init?(intValue: Int) { return nil }
            static let date = CodingKeys(stringValue: "date")!
        }
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    
    func fetchLatestRates(base: String, symbols: [String]? = nil) -> AnyPublisher<[String: Double], Never> {
        let baseLower = base.lowercased()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π (–∫—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç)
        let cacheKey = "cachedRates_\(base)"
        let cacheTimeKey = "cachedRatesTime_\(base)"
        
        if let data = UserDefaults.standard.data(forKey: cacheKey),
           let cached = try? JSONDecoder().decode([String: Double].self, from: data),
           let cacheTime = UserDefaults.standard.object(forKey: cacheTimeKey) as? Date,
           Date().timeIntervalSince(cacheTime) < 300 { // 5 –º–∏–Ω—É—Ç
            print("üìö –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(base) (–≤–æ–∑—Ä–∞—Å—Ç: \(Int(Date().timeIntervalSince(cacheTime))) —Å–µ–∫)")
            return Just(cached).eraseToAnyPublisher()
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
        let primaryURL = "https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/\(baseLower).json"
        
        // Fallback URL
        let fallbackURL = "https://latest.currency-api.pages.dev/v1/currencies/\(baseLower).json"
        
        return fetchRatesFromURL(primaryURL, base: base, symbols: symbols)
            .catch { _ in
                print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º fallback")
                return self.fetchRatesFromURL(fallbackURL, base: base, symbols: symbols)
            }
            .catch { error in
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
                
                // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if let data = UserDefaults.standard.data(forKey: cacheKey),
                   let cached = try? JSONDecoder().decode([String: Double].self, from: data) {
                    print("üìö –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(base) (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏)")
                    return Just(cached)
                }
                
                return Just([:])
            }
            .eraseToAnyPublisher()
    }
    
    private func fetchRatesFromURL(_ urlString: String, base: String, symbols: [String]?) -> AnyPublisher<[String: Double], Error> {
        guard let url = URL(string: urlString) else {
            return Fail(error: NSError(domain: "FawazCurrencyService", code: 1, userInfo: [NSLocalizedDescriptionKey: "Invalid URL"]))
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 10
        
        return URLSession.shared.dataTaskPublisher(for: request)
            .map(\.data)
            .tryMap { data -> [String: Double] in
                print("üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ \(urlString): \(data.count) –±–∞–π—Ç")
                
                let response = try JSONDecoder().decode(FawazCurrentResponse.self, from: data)
                
                // –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                var resultRates = response.rates.mapKeys { $0.uppercased() }
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                if let symbols = symbols {
                    resultRates = resultRates.filter { symbols.contains($0.key) }
                }
                
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –¥–ª—è \(base): \(resultRates.keys.joined(separator: ", "))")
                
                // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                let cacheKey = "cachedRates_\(base)"
                let cacheTimeKey = "cachedRatesTime_\(base)"
                if let encodedData = try? JSONEncoder().encode(resultRates) {
                    UserDefaults.standard.set(encodedData, forKey: cacheKey)
                    UserDefaults.standard.set(Date(), forKey: cacheTimeKey)
                }
                
                return resultRates
            }
            .eraseToAnyPublisher()
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    // –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª—è String –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    func fetchHistoricalData(from: String, to: String, days: Int) -> AnyPublisher<[HistoricalDataPoint], Error> {
        let fromCurrency = Currency(code: from, name: from, flagName: from.lowercased(), rate: 1.0)
        let toCurrency = Currency(code: to, name: to, flagName: to.lowercased(), rate: 1.0)
        return fetchHistoricalData(from: fromCurrency, to: toCurrency, days: days)
    }
    
    func fetchHistoricalData(from: Currency, to: Currency, days: Int) -> AnyPublisher<[HistoricalDataPoint], Error> {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ 365 –¥–Ω–µ–π –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
        let limitedDays = min(days, 365)
        if days > 365 {
            print("‚ö†Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω–æ \(days) –¥–Ω–µ–π, –Ω–æ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 365 –¥–Ω–µ–π. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ \(limitedDays) –¥–Ω–µ–π.")
        }
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤ \(from.code)/\(to.code) –∑–∞ \(limitedDays) –¥–Ω–µ–π")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        let cacheKey = "\(from.code)-\(to.code)-\(limitedDays)"
        if let cachedData = historicalCache[cacheKey] {
            print("üìö –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(from.code)/\(to.code)")
            return Just(cachedData)
                .setFailureType(to: Error.self)
                .eraseToAnyPublisher()
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º HistoricalDataManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        return Future<[HistoricalDataPoint], Error> { promise in
            let calendar = Calendar.current
            let endDate = Date()
            guard let startDate = calendar.date(byAdding: .day, value: -limitedDays + 1, to: endDate) else {
                promise(.failure(NSError(domain: "DateError", code: 0, userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏"])))
                return
            }
            
            HistoricalDataManager.shared.getHistoricalData(
                fromCurrency: from.code,
                toCurrency: to.code,
                startDate: startDate,
                endDate: endDate
            ) { result in
                switch result {
                case .success(let ratesData):
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ HistoricalDataPoint
                    let sortedData = ratesData.sorted { $0.0 < $1.0 }
                    var points: [HistoricalDataPoint] = []
                    var previousRate: Double?
                    
                    for (date, rate) in sortedData {
                        let change = previousRate != nil ? rate - previousRate! : 0.0
                        let changePercent = previousRate != nil && previousRate! > 0 ? (change / previousRate!) * 100 : 0.0
                        
                        points.append(HistoricalDataPoint(
                            date: date,
                            rate: rate,
                            change: change,
                            changePercent: changePercent
                        ))
                        
                        previousRate = rate
                    }
                    
                    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.historicalCache[cacheKey] = points
                    print("üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ \(points.count) —Ç–æ—á–µ–∫ –¥–ª—è \(cacheKey)")
                    
                    promise(.success(points))
                case .failure(let error):
                    promise(.failure(error))
                }
            }
        }
        .catch { error -> AnyPublisher<[HistoricalDataPoint], Error> in
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return self.generateDemoHistoricalData(from: from, to: to, days: limitedDays)
                .setFailureType(to: Error.self)
                .eraseToAnyPublisher()
        }
        .eraseToAnyPublisher()
    }
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    public func fetchRateForDateAsync(from: Currency, to: Currency, date: Date) async throws -> (Date, Double)? {
        let dateString = historyDateFormatter.string(from: date)
        let fromLower = from.code.lowercased()
        let toLower = to.code.lowercased()
        
        // –û—Å–Ω–æ–≤–Ω–æ–π URL
        let primaryURL = "https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@\(dateString)/v1/currencies/\(fromLower).json"
        
        // Fallback URL
        let fallbackURL = "https://\(dateString).currency-api.pages.dev/v1/currencies/\(fromLower).json"
        
        do {
            return try await fetchRateFromURLAsync(primaryURL, to: toLower, date: date)
        } catch {
            do {
                return try await fetchRateFromURLAsync(fallbackURL, to: toLower, date: date)
            } catch {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∑–∞ \(dateString): \(error.localizedDescription)")
                return nil
            }
        }
    }
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private func fetchRateFromURLAsync(_ urlString: String, to: String, date: Date) async throws -> (Date, Double)? {
        guard let url = URL(string: urlString) else {
            throw NSError(domain: "FawazCurrencyService", code: 1, userInfo: [NSLocalizedDescriptionKey: "Invalid URL"])
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 5 // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        let (data, _) = try await URLSession.shared.data(for: request)
        let response = try JSONDecoder().decode(FawazCurrentResponse.self, from: data)
        
        if let rate = response.rates[to] {
            return (date, rate)
        }
        
        return nil
    }
    
    // MARK: - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ fallback
    
    // –ü—É–±–ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª—è String –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    func generateDemoHistoricalData(from: String, to: String, days: Int) -> AnyPublisher<[HistoricalDataPoint], Never> {
        let fromCurrency = Currency(code: from, name: from, flagName: from.lowercased(), rate: 1.0)
        let toCurrency = Currency(code: to, name: to, flagName: to.lowercased(), rate: 1.0)
        return generateDemoHistoricalData(from: fromCurrency, to: toCurrency, days: days)
    }
    
    private func generateDemoHistoricalData(from: Currency, to: Currency, days: Int) -> AnyPublisher<[HistoricalDataPoint], Never> {
        return Future<[HistoricalDataPoint], Never> { promise in
            print("üé≠ –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–• –î–ê–ù–ù–´–• –¥–ª—è \(from.code)/\(to.code)")
            
            let calendar = Calendar.current
            let currentDate = Date()
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            let safeDate = currentDate
            print("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã: \(DateFormatter.localizedString(from: safeDate, dateStyle: .medium, timeStyle: .none))")
            
            let endDate = calendar.date(byAdding: .day, value: -1, to: calendar.startOfDay(for: safeDate)) ?? safeDate
            let startDate = calendar.date(byAdding: .day, value: -days, to: endDate) ?? endDate
            
            var demoPoints: [HistoricalDataPoint] = []
            var currentIterationDate = calendar.startOfDay(for: startDate)
            let finalDate = calendar.startOfDay(for: endDate)
            
            // –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
            var currentRate: Double
            if from.code == "USD" && to.code == "EUR" {
                currentRate = 0.85
            } else if from.code == "EUR" && to.code == "USD" {
                currentRate = 1.18
            } else if from.code == "USD" && to.code == "RUB" {
                currentRate = 75.0
            } else if from.code == "RUB" && to.code == "USD" {
                currentRate = 1.0 / 75.0
            } else {
                currentRate = 1.0
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            while currentIterationDate <= finalDate {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
                let variation = Double.random(in: 0.95...1.05)
                let adjustedRate = currentRate * variation
                
                demoPoints.append(HistoricalDataPoint(
                    date: currentIterationDate,
                    rate: adjustedRate,
                    change: 0.0,
                    changePercent: 0.0
                ))
                
                guard let nextDate = calendar.date(byAdding: .day, value: 1, to: currentIterationDate) else { break }
                currentIterationDate = nextDate
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for i in 1..<demoPoints.count {
                let previousRate = demoPoints[i-1].rate
                let currentRateValue = demoPoints[i].rate
                let change = currentRateValue - previousRate
                let changePercent = (change / previousRate) * 100
                
                demoPoints[i].change = change
                demoPoints[i].changePercent = changePercent
            }
            
            print("üé≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \(demoPoints.count) —Ç–æ—á–µ–∫ –¥–ª—è \(from.code)/\(to.code)")
            promise(.success(demoPoints))
        }
        .eraseToAnyPublisher()
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    func getCurrentRate(from: String, to: String) -> Double? {
        let cacheKey = "cachedRates_\(from)"
        if let data = UserDefaults.standard.data(forKey: cacheKey),
           let cached = try? JSONDecoder().decode([String: Double].self, from: data) {
            return cached[to.uppercased()]
        }
        return nil
    }
    
    func clearHistoricalDataCache() {
        historicalCache.removeAll()
        print("üóëÔ∏è –ö—ç—à –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö FawazCurrencyService –æ—á–∏—â–µ–Ω")
    }
    
    func clearCache() {
        historicalCache.removeAll()
        currentRatesCache.removeAll()
        print("üóëÔ∏è –ö—ç—à FawazCurrencyService –æ—á–∏—â–µ–Ω")
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è mapKeys
private extension Dictionary {
    func mapKeys<T: Hashable>(_ transform: (Key) -> T) -> [T: Value] {
        var result: [T: Value] = [:]
        for (key, value) in self {
            result[transform(key)] = value
        }
        return result
    }
}